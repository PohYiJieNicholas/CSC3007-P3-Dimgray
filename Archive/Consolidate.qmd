---
title: "Consolidated"
format: html
---

# Required Packages

```{r}
#| label: required-packages
#| message: false

library(tidyverse)
library(gt)
library(palmerpenguins)
library(ggbeeswarm)
library(ggmosaic)
library(ggplot2)
library(dplyr)
library(readr)
library(reshape2)
library(gridExtra)
```

# Data
```{r}
#| label: inflation-rate-monthly
#| message: false

inflation_rate <- read_csv("M212911.csv", skip = 10)

inflation_rate <- inflation_rate[1:152,]

inflation_rate 

# Filter the data
filtered_data <- inflation_rate |>
  filter(`Data Series` %in% 
  c("Food", "Food Excl Food Serving Services", "Clothing & Footwear","Housing & Utilities","Household Durables & Services","Health Care","Transport","Communication", "Recreation & Culture", "Education", "Miscellaneous Goods & Services", "All Items")) |>
  select(`Data Series`, `2023 Jan`, `2023 Feb`,`2023 Mar`, `2023 Apr`,`2023 May`, `2023 Jun`, `2023 Jul`, `2023 Aug`,`2023 Sep`, `2023 Oct`,`2023 Nov`, `2023 Dec`)

filtered_month_data <- filtered_data |>
  pivot_longer(cols = -`Data Series`, names_to = "month", values_to = "inflation_rate")

# Convert month to proper date format
filtered_month_data <- filtered_month_data |>
  mutate(month = as.POSIXct(strptime(paste(month, "01"), "%Y %b %d")))
```

```{r}
#| label: inflation-rate-yearly
#| message: false

inflation_rate_yearly <- read_csv("M212941.csv", skip = 9)

inflation_rate_yearly <- inflation_rate_yearly[1:152,]

inflation_rate_yearly


# Filter the data
filtered_yearly_data <- inflation_rate_yearly |>
  filter(`Data Series` %in% 
  c("Food", "Food Excl Food Serving Services", "Clothing & Footwear","Housing & Utilities","Household Durables & Services","Health Care","Transport","Communication", "Recreation & Culture", "Education", "Miscellaneous Goods & Services", "All Items")) |>
  select(`Data Series`, `2023`, `2022`,`2021`, `2020`,`2019`)|>
  drop_na(`Data Series`, `2023`, `2022`,`2021`, `2020`,`2019`)


# print column name
yearly_data <- filtered_yearly_data %>%
  mutate(`2019` = as.numeric(`2019`),
         `2020` = as.numeric(`2020`),
         `2021` = as.numeric(`2021`),
         `2022` = as.numeric(`2022`),
         `2023` = as.numeric(`2023`))

long_yearly_data <- yearly_data %>%
  pivot_longer(cols = c(`2019`, `2020`, `2021`, `2022`, `2023`), names_to = "Year", values_to = "Rate_Change")%>%
  mutate(Year = as.integer(Year))

data_long <- filtered_yearly_data |>
  melt(id.vars = "Data Series", variable.name = "Year", value.name = "Value")|>
  drop_na(`Data Series`, `Year`, `Value`)
  
# Convert the Year column to numeric
data_long$Year <- as.numeric(as.character(data_long$Year))

# Convert the Value column to numeric, handling non-numeric entries (e.g., "na")
data_long$Value <- as.numeric(as.character(data_long$Value))

data_long

```

```{r}
month_rate <- inflation_rate %>%
  mutate(across(matches("^2019|^2020|^2021|^2022|^2023"), as.numeric))
month_data <- month_rate %>%
  filter(`Data Series` %in% c("Food", "Food Excl Food Serving Services", "Clothing & Footwear", "Housing & Utilities", "Household Durables & Services", "Health Care", "Transport", "Communication", "Recreation & Culture", "Education", "Miscellaneous Goods & Services", "All Items")) %>%
  select(`Data Series`, matches("^2019|^2020|^2021|^2022|^2023"))

# Reshape the data from wide to long format
long_month_data <- month_data %>%
  pivot_longer(cols = matches("^2019|^2020|^2021|^2022|^2023"), 
               names_to = "Year_Month", values_to = "Rate_Change") %>%
  separate(Year_Month, into = c("Year", "Month"), sep = " ") %>%
  mutate(Year = as.integer(Year), 
         Month = factor(Month, levels = c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec")),
         Date = as.Date(paste(Year, Month, "01", sep = "-"), format = "%Y-%b-%d"))
long_month_data
```


```{r}
#| label: inflation-yearly-heatmap
#| fig-height: 6
#| fig-width: 10

# Generate the heatmap
ggplot(data_long, aes(x = Year, y = `Data Series`, fill = Value)) +
  geom_tile() +
  scale_fill_gradient(low = "#fee8c8", high = "#e34a33", na.value = "grey") +
  theme_minimal() +
  labs(title = "Heatmap of inflation rate by data series and year",
       x = "Year",
       y = "Data Series")
```

```{r}
# Generate the heatmap
ggplot(long_month_data, aes(x = Date, y = Rate_Change, fill = month_data)) +
  geom_tile() +
  scale_fill_gradient(low = "#fee8c8", high = "#e34a33") +
  theme_minimal() +
  labs(title = "Heatmap of inflation rate by data series and month",
       x = "Month",
       y = "Data Series")


```

```{r}
#| label: comparison by year
#| message: false

# Filter the data to include only the items of interest and the years 2019 and 2023
filtered_price_index <- inflation_rate_yearly |>
  filter(`Data Series` %in% c("Food", "Food Excl Food Serving Services", "Clothing & Footwear", "Housing & Utilities","Household Durables & Services","Health Care", "Transport","Communication", "Recreation & Culture", "Education", "Miscellaneous Goods & Services", "All Items")) |>
  select(`Data Series`, `2019`, `2023`)

# Coerce the '2019' and '2023' columns to numeric to ensure consistent types
filtered_price_index <- filtered_price_index |>
  mutate(
    `2019` = as.numeric(`2019`),
    `2023` = as.numeric(`2023`)
  )

# Pivot the data to long format for easier plotting
long_price_index <- filtered_price_index |>
  pivot_longer(cols = starts_with("20"), names_to = "year", values_to = "inflation_rate")

# Plot the data
ggplot(long_price_index, aes(x = `Data Series`, y = inflation_rate, fill = year)) +
  geom_bar(stat = "identity", position = "dodge") +
  geom_text(aes(label = sprintf("%.1f", inflation_rate)), 
            position = position_dodge(width = 0.9),  
            vjust = -0.5,
            size = 3) + 
  labs(
    title = "Comparison of Inflation Rates by Category between 2019 and 2023",
    x = "Category",
    y = "Inflation Rate (%)",
    fill = "Year",
    caption = "Source: Department of Statistics Singapore"
  ) +
  theme_classic() +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1)
  )
```

```{r}

# Filter for the year 2023 only
filtered_long_yearly_data <- long_yearly_data %>%
  filter(Year == 2023)

# Calculate total change for each Data Series
total_change <- long_yearly_data %>%
  filter(Year %in% c(2019, 2023)) %>%
  group_by(`Data Series`) %>%
  summarize(Total_Change = Rate_Change[Year == 2023] - Rate_Change[Year == 2019])

# Merge total change with the filtered data
filtered_long_yearly_data <- filtered_long_yearly_data %>%
  left_join(total_change, by = "Data Series")

# Create the bar graph with different colors for each category
ggplot(filtered_long_yearly_data, aes(x = `Data Series`, y = Rate_Change, fill = `Data Series`)) +
  geom_bar(stat = "identity") +
  geom_text(aes(label = paste0(round(Rate_Change, 1), "%")),
            position = position_dodge(width = 0.9), vjust = -0.5, size = 3, color = "black") +
  labs(title = "CPI Rate Change in 2023 Compared to 2019",
       x = "Data Series",
       y = "Rate Change (%)",
       fill = "Data Series") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1), # Rotate x-axis labels for better readability
        legend.position = "none", # Remove legend since each bar is color-coded
        plot.title = element_text(hjust = 0.5), # Center the plot title
        axis.text = element_text(size = 10), # Increase axis text size
        axis.title = element_text(size = 12)) # Increase axis title size
```

```{r}
# Filter for the years 2019 and 2023
filtered_long_yearly_data <- long_yearly_data %>%
  filter(Year %in% c(2019, 2023))

# Create the lollipop chart
ggplot(filtered_long_yearly_data, aes(x = `Data Series`, y = Rate_Change, color = factor(Year))) +
  geom_segment(aes(x = `Data Series`, xend = `Data Series`, y = 0, yend = Rate_Change), size = 1) +
  geom_point(size = 4) +
  labs(title = "CPI Rate Change: 2019 vs 2023",
       x = "Data Series",
       y = "Rate Change (%)",
       color = "Year") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1), # Rotate x-axis labels for better readability
        plot.title = element_text(hjust = 0.5),
        axis.text = element_text(size = 10),
        axis.title = element_text(size = 12),
        legend.position = "bottom")
```

```{r}

# Read the data
inflation_rate <- read_csv("M212941.csv", skip = 9)

# Filter the data to include only the first 152 rows
inflation_rate <- inflation_rate[1:152,]

# Filter the data for the years 2021, 2022, and 2023
filtered_data <- inflation_rate %>%
  filter(`Data Series` %in% c("Food", "Food Excl Food Serving Services", "Clothing & Footwear", "Housing & Utilities", "Household Durables & Services", "Health Care", "Transport", "Communication", "Recreation & Culture", "Education", "Miscellaneous Goods & Services", "All Items")) %>%
  select(`Data Series`, `2021`, `2022`, `2023`)

# Reshape the data for plotting
plot_data <- filtered_data %>%
  pivot_longer(cols = c(`2021`, `2022`, `2023`), names_to = "Year", values_to = "Inflation Rate")

# Create the faceted bar plot
ggplot(plot_data, aes(x = Year, y = `Inflation Rate`, fill = Year)) +
  geom_bar(stat = "identity", position = "dodge") +
  facet_wrap(~ `Data Series`, scales = "free_y") +
  labs(title = "Inflation Rate by Year for Various Categories",
       x = "Year",
       y = "Inflation Rate (%)") +
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
        axis.title = element_text(size = 12),
        axis.text = element_text(size = 10),
        strip.text = element_text(size = 10),
        legend.position = "bottom")


```

```{r}
# Create the grouped bar plot
ggplot(plot_data, aes(x = `Data Series`, y = `Inflation Rate`, fill = Year)) +
  geom_bar(stat = "identity", position = "dodge") +
  labs(title = "Inflation Rate by Year for Various Categories",
       x = "Category",
       y = "Inflation Rate (%)") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1),
        plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
        axis.title = element_text(size = 12),
        axis.text = element_text(size = 10),
        legend.position = "bottom")

```

```{r}
#| label: inflation-violinplot
#| fig-height: 6
#| fig-width: 10

# Generate the violin plot: Combine a density plot with a box plot, displaying the probability density of the data at different values
# trim = TRUE: Trim the tails of the violins
# scale = "width": Scale the width of the violins, makes it easier for comparison
# adjust = 1.5: Adjust the width of the violins; increasing it = makes plot smoother, 
# decreasing it = makes plot more sensitive to plot variation

ggplot(data_long, aes(x = `Data Series`, y = Value)) +
  geom_violin(trim = TRUE, scale = "width", adjust = 1.5) +
  theme_minimal() +
  labs(title = "Violin Plot of Inflation Rate by Data Series",
       x = "Data Series",
       y = "Inflation Rate (%)") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

```

```{r}
#| label: inflation-facetgrid
#| fig-height: 10
#| fig-width: 10

# Generate the facet grid plot
ggplot(data_long, aes(x = Year, y = Value)) +
  geom_line() +
  geom_point() +
  facet_wrap(~ `Data Series`, scales = "free_y") +
  theme_minimal() +
  labs(title = "Facet Grid of Inflation Rate by Data Series",
       x = "Year",
       y = "Inflation Rate (%)")

```
```