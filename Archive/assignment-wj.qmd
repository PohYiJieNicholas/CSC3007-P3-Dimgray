---
title: "Assignment-Wj"
author: "Wujie"
format: html
editor: visual
---

## 

# Import library

```{r}
library(dplyr)
library(tidyr)
library(ggplot2)
library(plotly)
library(tidyverse)


```

## Read csv

```{r}
# Read the data
yearly_rate <- read_csv("M212941.csv", skip = 9)
month_rate <- read_csv("M212911.csv", skip = 10)
month_rate <- month_rate[1:152,]

# Filter the data to include only the first 152 rows
yearly_rate <- yearly_rate[1:152,]

# Filter the data for the years 2019 ,2020 ,2021, 2022, and 2023
# base year are 2019
yearly_data <- yearly_rate %>%
  filter(`Data Series` %in% c("Food", "Food Excl Food Serving Services", "Clothing & Footwear", "Housing & Utilities", "Household Durables & Services", "Health Care", "Transport", "Communication", "Recreation & Culture", "Education", "Miscellaneous Goods & Services", "All Items")) %>%
  select(`Data Series`, `2019`,`2020`,`2021`, `2022`, `2023`)
```

```{r}
yearly_data
# print column name
print(colnames(yearly_data))
yearly_data <- yearly_data %>%
  mutate(`2019` = as.numeric(`2019`),
         `2020` = as.numeric(`2020`),
         `2021` = as.numeric(`2021`),
         `2022` = as.numeric(`2022`),
         `2023` = as.numeric(`2023`))

```

```{r}
long_yearly_data <- yearly_data %>%
  pivot_longer(cols = c(`2019`, `2020`, `2021`, `2022`, `2023`), names_to = "Year", values_to = "Rate_Change") %>%
  mutate(Year = as.integer(Year))
```

```{r}
# Filter for the years 2019 to 2023 (already done implicitly by selecting these columns)
filtered_long_yearly_data <- long_yearly_data %>%
  filter(Year >= 2019 & Year <= 2023)

# Create the plot
ggplot(filtered_long_yearly_data, aes(x = Year, y = Rate_Change, color = `Data Series`)) +
  geom_line() +
  geom_point() +
  labs(title = "PPI Rate Change from 2019 to 2023",
       x = "Year",
       y = "Rate Change (%)",
       color = "Data Series") +
  theme_minimal()
```

```{r}

# Filter for the year 2023 only
filtered_long_yearly_data <- long_yearly_data %>%
  filter(Year == 2023)

# Calculate total change for each Data Series
total_change <- long_yearly_data %>%
  filter(Year %in% c(2019, 2023)) %>%
  group_by(`Data Series`) %>%
  summarize(Total_Change = Rate_Change[Year == 2023] - Rate_Change[Year == 2019])

# Merge total change with the filtered data
filtered_long_yearly_data <- filtered_long_yearly_data %>%
  left_join(total_change, by = "Data Series")

# Create the bar graph with different colors for each category
ggplot(filtered_long_yearly_data, aes(x = `Data Series`, y = Rate_Change, fill = `Data Series`)) +
  geom_bar(stat = "identity") +
  geom_text(aes(label = paste0(round(Rate_Change, 1), "%")),
            position = position_dodge(width = 0.9), vjust = -0.5, size = 3, color = "black") +
  labs(title = "CPI Rate Change in 2023 Compared to 2019",
       x = "Data Series",
       y = "Rate Change (%)",
       fill = "Data Series") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1), # Rotate x-axis labels for better readability
        legend.position = "none", # Remove legend since each bar is color-coded
        plot.title = element_text(hjust = 0.5), # Center the plot title
        axis.text = element_text(size = 10), # Increase axis text size
        axis.title = element_text(size = 12)) # Increase axis title size
```

```{r}

# Filter for the years 2019 and 2023
filtered_long_yearly_data <- long_yearly_data %>%
  filter(Year %in% c(2019, 2023))

# Create the lollipop chart
ggplot(filtered_long_yearly_data, aes(x = `Data Series`, y = Rate_Change, color = factor(Year))) +
  geom_segment(aes(x = `Data Series`, xend = `Data Series`, y = 0, yend = Rate_Change), size = 1) +
  geom_point(size = 4) +
  labs(title = "CPI Rate Change: 2019 vs 2023",
       x = "Data Series",
       y = "Rate Change (%)",
       color = "Year") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1), # Rotate x-axis labels for better readability
        plot.title = element_text(hjust = 0.5),
        axis.text = element_text(size = 10),
        axis.title = element_text(size = 12),
        legend.position = "bottom")
```

```{r}

# Filter for the years 2019 to 2023
filtered_long_yearly_data <- long_yearly_data %>%
  filter(Year %in% c(2019, 2020, 2021, 2022, 2023))

# Create the line graph without points
ggplot(filtered_long_yearly_data, aes(x = Year, y = Rate_Change, color = `Data Series`, group = `Data Series`)) +
  geom_line(size = 1) +
  labs(title = "CPI Rate Change from 2019 to 2023",
       x = "Year",
       y = "Rate Change (%)",
       color = "Data Series") +
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5),
        axis.text = element_text(size = 10),
        axis.title = element_text(size = 12),
        legend.position = "bottom") +
  scale_x_continuous(breaks = seq(2019, 2023, 1)) # Ensure all years are shown on the x-axis
```

```{r}
month_rate <- month_rate %>%
  mutate(across(matches("^2019|^2020|^2021|^2022|^2023"), as.numeric))
month_data <- month_rate %>%
  filter(`Data Series` %in% c("Food", "Food Excl Food Serving Services", "Clothing & Footwear", "Housing & Utilities", "Household Durables & Services", "Health Care", "Transport", "Communication", "Recreation & Culture", "Education", "Miscellaneous Goods & Services", "All Items")) %>%
  select(`Data Series`, matches("^2019|^2020|^2021|^2022|^2023"))

```

```{r}

# Reshape the data from wide to long format
long_month_data <- month_data %>%
  pivot_longer(cols = matches("^2019|^2020|^2021|^2022|^2023"), 
               names_to = "Year_Month", values_to = "Rate_Change") %>%
  separate(Year_Month, into = c("Year", "Month"), sep = " ") %>%
  mutate(Year = as.integer(Year), 
         Month = factor(Month, levels = c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec")),
         Date = as.Date(paste(Year, Month, "01", sep = "-"), format = "%Y-%b-%d"))

# Create the line graph
ggplot(long_month_data, aes(x = Date, y = Rate_Change, color = `Data Series`, group = `Data Series`)) +
  geom_line(size = 1) +
  labs(title = "Monthly CPI Rate Change from January 2019 to December 2023",
       x = "Date",
       y = "Rate Change (%)",
       color = "Data Series") +
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5),
        axis.text.x = element_text(angle = 45, hjust = 1), # Rotate x-axis labels for better readability
        axis.text = element_text(size = 10),
        axis.title = element_text(size = 12),
        legend.position = "bottom")
```

```{r}
# Reshape the data from wide to long format
long_month_data <- month_data %>%
  pivot_longer(cols = matches("^2019|^2020|^2021|^2022|^2023"), 
               names_to = "Year_Month", values_to = "Rate_Change") %>%
  separate(Year_Month, into = c("Year", "Month"), sep = " ") %>%
  mutate(Year = as.integer(Year), 
         Month = factor(Month, levels = c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec")),
         Date = as.Date(paste(Year, Month, "01", sep = "-"), format = "%Y-%b-%d"))

# Create the line graph using ggplot2
p <- ggplot(long_month_data, aes(x = Date, y = Rate_Change, color = `Data Series`, group = `Data Series`)) +
  geom_line(size = 1) +
  labs(title = "Monthly CPI Rate Change from January 2019 to December 2023",
       x = "Date",
       y = "Rate Change (%)",
       color = "Data Series") +
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5),
        axis.text.x = element_text(angle = 45, hjust = 1), # Rotate x-axis labels for better readability
        axis.text = element_text(size = 10),
        axis.title = element_text(size = 12),
        legend.position = "bottom")

# Convert the ggplot2 graph to an interactive plotly graph
interactive_plot <- ggplotly(p)

# Display the interactive plot
interactive_plot
```

```{r}
print(long_month_data)
```

```{}
```

```{r}
# Define custom color palette
custom_colors <- c("All Items" = "red", "Education" = "green", "Health Care" = "blue", 
                   "Clothing & Footwear" = "orange", "Food" = "purple", "Household Durables & Services" = "brown",
                   "Communication" = "pink", "Food Excl Food Serving Services" = "cyan", 
                   "Housing & Utilities" = "magenta", "Recreation & Culture" = "yellow", 
                   "Transport" = "black", "Miscellaneous" = "gray")

# Create the line graph using ggplot2
p <- ggplot(long_month_data, aes(x = Date, y = Rate_Change, color = `Data Series`, group = `Data Series`)) +
  geom_line(size = 1) +
  scale_color_manual(values = custom_colors) +
  labs(title = "Monthly CPI Rate Change from January 2019 to December 2023",
       x = "Time Period",
       y = "Rate Change (%)",
       color = NULL) + # Use "Category" as the legend title
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5, size = 14, family = "Arial"),
        axis.text.x = element_text(angle = 45, hjust = 1, size = 10, family = "Arial"), # Rotate x-axis labels for better readability
        axis.text.y = element_text(size = 10, family = "Arial"),
        axis.title = element_text(size = 12, family = "Arial"),
        legend.position = "bottom",
        legend.title = element_text(size = 12, family = "Arial"), # Adjust legend title size
        legend.text = element_text(size = 10, family = "Arial"),
        plot.margin = margin(20, 20, 50, 20)) + # Increase bottom margin for legend
  guides(color = guide_legend(nrow = 4, byrow = TRUE))

# Display the static plot
print(p)
```

```{r}
library(ggplot2)
library(tidyverse)
library(lubridate)
library(RColorBrewer)

set.seed(123)
categories <- c("All Items", "Education", "Health Care", "Clothing & Footwear", "Food", 
                "Household Durables & Services", "Communication", "Food Excl Food Serving Services", 
                "Housing & Utilities", "Recreation & Culture", "Transport", "Miscellaneous")
long_month_data$Category <- sample(categories, nrow(long_month_data), replace = TRUE)

# Create the heatmap using ggplot2 with spacing between tiles and facets for each category
p <- ggplot(long_month_data, aes(x = Year, y = Month, fill = Rate_Change)) +
  geom_tile(color = "white", width = 0.9, height = 0.9) + # Adjust width and height for spacing
  scale_fill_gradientn(colors = brewer.pal(11, "Spectral"), name = "Rate Change (%)") +
  labs(title = "Monthly CPI Rate Change from January 2019 to December 2023",
       x = "Year",
       y = "Month") +
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5, size = 14, family = "Arial"),
        axis.text.x = element_text(size = 10, family = "Arial"),
        axis.text.y = element_text(size = 10, family = "Arial"),
        axis.title = element_text(size = 12, family = "Arial"),
        legend.position = "bottom",
        legend.title = element_text(size = 12, family = "Arial"),
        legend.text = element_text(size = 10, family = "Arial"),
        panel.grid = element_blank(), # Remove grid lines
        panel.background = element_blank(), # Remove panel background
        plot.margin = margin(0, 0, 0, 0)) + # Remove plot margins
  facet_wrap(~ Category) # Facet by Category

# Display the heatmap
print(p)

```

```{r}
# Filter data to include only "All Items"
all_items_data <- long_month_data %>% filter(Category == "All Items")

# Remove rows with missing values
all_items_data <- na.omit(all_items_data)

# Create the heatmap using ggplot2 with spacing between tiles
p <- ggplot(all_items_data, aes(x = Year, y = Month, fill = Rate_Change)) +
  geom_tile(color = "white", width = 0.9, height = 0.9) + # Adjust width and height for spacing
  scale_fill_gradientn(colors = brewer.pal(11, "Spectral"), name = "Rate Change (%)") +
  labs(title = "Monthly CPI Rate Change for All Items from January 2019 to December 2023",
       x = "Year",
       y = "Month") +
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5, size = 14, family = "Arial"),
        axis.text.x = element_text(size = 10, family = "Arial"),
        axis.text.y = element_text(size = 10, family = "Arial"),
        axis.title = element_text(size = 12, family = "Arial"),
        legend.position = "bottom",
        legend.title = element_text(size = 12, family = "Arial"),
        legend.text = element_text(size = 10, family = "Arial"),
        panel.grid = element_blank(), # Remove grid lines
        panel.background = element_blank(), # Remove panel background
        plot.margin = margin(0, 0, 0, 0)) # Remove plot margins

# Display the heatmap
print(p)
```

```{r}

filtered_data <- long_month_data %>% 
  filter(Category == "All Items" & (Year == 2019 | Year == 2023))
# Fill missing values using linear interpolation
filtered_data <- filtered_data %>%
  group_by(Month) %>%
  mutate(Rate_Change = zoo::na.approx(Rate_Change, na.rm = FALSE)) %>%
  ungroup()

# Create the heatmap using ggplot2 with spacing between tiles
p <- ggplot(filtered_data, aes(x = as.factor(Year), y = Month, fill = Rate_Change)) +
  geom_tile(color = "white", width = 0.9, height = 0.9) + # Adjust width and height for spacing
  scale_fill_gradientn(colors = brewer.pal(11, "Spectral"), name = "Rate Change (%)") +
  labs(title = "Monthly CPI Rate Change for All Items: 2019 vs 2023",
       x = "Year",
       y = "Month") +
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5, size = 14, family = "Arial"),
        axis.text.x = element_text(size = 10, family = "Arial"),
        axis.text.y = element_text(size = 10, family = "Arial"),
        axis.title = element_text(size = 12, family = "Arial"),
        legend.position = "bottom",
        legend.title = element_text(size = 12, family = "Arial"),
        legend.text = element_text(size = 10, family = "Arial"),
        panel.grid = element_blank(), # Remove grid lines
        panel.background = element_blank(), # Remove panel background
        plot.margin = margin(0, 0, 0, 0)) # Remove plot margins

# Display the heatmap
print(p)
```

```{r}

```
