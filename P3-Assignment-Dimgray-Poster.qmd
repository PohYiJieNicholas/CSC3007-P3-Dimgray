---
title: "Percent Change In Consumer Price Index (CPI) of year 2023"
format:
  poster-typst: 
    size: "33x23" # Approximately A1
    poster-authors: "Jared Teo, Nicholas Poh, Oliver Choy, WuJie, Nicole, Kurt"
    departments: "Information and Communication Technologies"
    institution-logo: "./images/sit-logo.png"
    footer-text: "Information Visualisation 2024"
    footer-emails: "2101720@sit.singaporetech.edu.sg, *insert email here*"

execute:
  echo: false
knitr:
  opts_chunk:
    dev: svglite
---

```{r}
#| label: setup
#| include: false

# Load necessary libraries
library(tidyverse)
library(lubridate)
library(ggplot2)
library(knitr)
library(RColorBrewer)

```


# Introduction

Inflation in Singapore has moderated over 2023, prices are still above pre-pandemic levels and expected to remain elevated in 2024 after the 7 per cent rise in public transport fares, a second round of Goods and Services Tax (GST) hike and carbon tax adjustments kick in.[^straitstimes].The average price increase in 2023 ranged between 2 per cent for household durables and services, and just over 6 per cent for food, transport, recreation and cultures. Further more, there are 10 items that have, on average, seen double-digit price increases in 2023.[^straitstimes]

[^straitstimes]: <https://www.straitstimes.com/business/prices-in-s-pore-seen-moderating-but-likely-to-remain-above-pandemic-levels-in-2024>

Economists stated that the inflation in 2023 was largely from external factors such as the the reopening of economies, the impact of the Ukraine-Russia war and the post-Covid-19 supply chain disruption and restructuring. The economists, however, are not concerned due to the central bank's strong Singapore dollar policy to help manage imported inflation. This would help keep the incoming price increases manageable. Overall, however, the recent GST hike and rise in consumer prices will affect individuals from different income groups. Even with the government's support packages, the lower- to middle-income are expected to make some adjustments to their lifestyles. [^straitstimes]


[^straitstimes]: <https://www.straitstimes.com/business/prices-in-s-pore-seen-moderating-but-likely-to-remain-above-pandemic-levels-in-2024>


# Previous Visualization

```{r}
#| label: fig-wsj-on-poster
#| fig-cap: "Heat map of inflationary impact on key itens over 2023, published by the
#|   Straits Times."
#| out-width: 60%

include_graphics("images/price_index.png")
```

[^straitstimes]: <https://www.straitstimes.com/business/prices-in-s-pore-seen-moderating-but-likely-to-remain-above-pandemic-levels-in-2024>

# Strengths

*   The heat map effectively highlights the items and the month when inflation effects were most pronounced.
*   The color legend provides a clear indication of the inflation rate for each item and month.
*   The infotip provides additional information about the inflation rate for each item and month.



# Suggested Improvements 

1. Increase the maximum and minimum values in the legend to 18 and -9, respectively, to accurately reflect the range of values in the dataset.
2. Add more legend breaks and colors to enhance the contrast in percentage changes in the CPI.
3. Show the trend over the past five years, rather than focusing solely on 2023.
4. Include event breaklines to highlight changes before, during, and after the circuit breaker lockdown.
5. Utilize diverging palettes to clearly indicate positive and negative percentage changes in the CPI.
6. Incorporate data for the month of December to compute the overall annual average, as December may show significant changes compared to January to November.
7. Add a source note to the plot, allowing readers to easily reference the data source.
1.  
1.  
[^colorbrewer]: <https://colorbrewer2.org/#type=sequential&scheme=Reds&n=5>
    
    
# Implementation


## Data

*   Percent change in consumer price index over corresponding period of previous year, 2019 as base year, Annual.[^CPI_Base_Year_2019_Yearly] 
*   Percent change in consumer price index over corresponding period of previous year, 2019 as base year, Monthly[^CPI_Base_Year_2019_Monthly] 

[^CPI_Base_Year_2019_Yearly]: <https://tablebuilder.singstat.gov.sg/table/TS/M212941>
[^CPI_Base_Year_2019_Monthly]: <https://tablebuilder.singstat.gov.sg/table/TS/M212911>


## Software

We used the Quarto publication framework and the R programming language, along with the following third-party packages:

*   *tidyverse* for data transformation, including *ggplot2* for visualization
    based on the Grammar of Graphics
*   *lubridate* *insert description here*


```{=typst}
#v(2em)
```

```{r}
#| label: read-data
#| include: false
#| echo: false
# Load the dataset
dataset <- read_csv("M212911.csv", skip = 10)
dataset <- dataset[1:152,]
```

```{r}
#| label: preprocess-data
#| include: false
#| echo: false

# Convert relevant columns to numeric
dataset <- dataset %>%
  mutate(across(matches("^2019|^2020|^2021|^2022|^2023"), ~ as.numeric(as.character(.))))

month_data <- dataset %>%
  filter(`Data Series` %in% c("Food", "Food Excl Food Serving Services", "Clothing & Footwear", "Housing & Utilities", "Household Durables & Services", "Health Care", "Transport", "Communication", "Recreation & Culture", "Education", "Miscellaneous Goods & Services", "All Items")) %>%
  select(`Data Series`, matches("^2019|^2020|^2021|^2022|^2023"))
```

```{r}
#| label: color-scale
#| include: false
#| echo: false

# Pivot longer for heatmap generation
long_data <- month_data %>%
  pivot_longer(cols = matches("^2019|^2020|^2021|^2022|^2023"), 
               names_to = "Year_Month", values_to = "Percent_Change") %>%
  separate(Year_Month, into = c("Year", "Month"), sep = " ") %>%
  mutate(Year = as.integer(Year), 
         Month = factor(Month, levels = c(month.abb, "Overall_Avg")),  # Add "Overall_Avg" as the 14th month
         Month_Index = as.numeric(factor(Month, levels = c(month.abb, "Overall_Avg"))),
         Year_Month_Index = paste(Year, sprintf("%02d", Month_Index), sep = "-"))

# Calculate the overall average for each data series from 2019 to 2023
overall_averages <- long_data %>%
  filter(Year >= 2019 & Year <= 2023) %>%
  group_by(`Data Series`) %>%
  summarize(Percent_Change = mean(Percent_Change, na.rm = TRUE), .groups = 'drop') %>%
  mutate(Year = 2023, Month = "Overall_Avg", Month_Index = 14, Year_Month_Index = "2023-14")  # Use month index 14 for "Overall_Avg"


# Add a small gap before and after "Overall_Avg"
gap_data_before_avg <- overall_averages %>%
  mutate(Month = "Gap", Month_Index = 13, Year_Month_Index = "2023-13", Percent_Change = NA)

gap_data_after_avg <- overall_averages %>%
  mutate(Month = "Gap", Month_Index = 15, Year_Month_Index = "2023-15", Percent_Change = NA)

# Combine the original data with the overall averages and the gaps
combined_data <- bind_rows(long_data, overall_averages, gap_data_before_avg, gap_data_after_avg) %>%
  arrange(Year, Month_Index)


color_scale <- scale_fill_gradientn(
  colors = rev(brewer.pal(9, "RdYlBu")),  # Use the RdYlBu palette with 9 colors in reverse order
  values = scales::rescale(c(min(combined_data$Percent_Change, na.rm = TRUE), -3, 0, 3, 6, 9, 12, max(combined_data$Percent_Change, na.rm = TRUE))),  # Define breakpoints dynamically
  limits = c(min(combined_data$Percent_Change, na.rm = TRUE), max(combined_data$Percent_Change, na.rm = TRUE)),  # Dynamic limits
  breaks = seq(floor(min(combined_data$Percent_Change, na.rm = TRUE)), ceiling(max(combined_data$Percent_Change, na.rm = TRUE)), by = 3),  # Adjust breaks dynamically
  labels = as.character(seq(floor(min(combined_data$Percent_Change, na.rm = TRUE)), ceiling(max(combined_data$Percent_Change, na.rm = TRUE)), by = 3)),  # Adjust labels dynamically
  na.value = "white"  # Set color for NA values
  )

# Adjust the data series names for better readability
combined_data <- combined_data %>%
  mutate(`Data Series` = case_when(
    `Data Series` == "Miscellaneous Goods & Services" ~ "Miscellaneous\nGoods & Services",
    `Data Series` == "Household Durables & Services" ~ "Household Durables\n& Services",
    `Data Series` == "Food Excl Food Serving Services" ~ "Food Excl Food\nServing Services",
    TRUE ~ as.character(`Data Series`)
  ))


# Generate the x-axis breaks and labels to include January, July, and "Overall_Avg" for each year
x_breaks <- combined_data %>%
  filter(Month %in% c("Jan", "Jul", "Overall_Avg", "Gap")) %>%
  mutate(Year_Month_Index = paste(Year, sprintf("%02d", Month_Index), sep = "-")) %>%
  distinct(Year_Month_Index, .keep_all = TRUE) %>%
  arrange(Year, Month_Index) %>%
  pull(Year_Month_Index)

x_labels <- combined_data %>%
  filter(Month %in% c("Jan", "Jul", "Overall_Avg", "Gap")) %>%
  mutate(Year_Month_Index = paste(Year, sprintf("%02d", Month_Index), sep = "-")) %>%
  distinct(Year_Month_Index, .keep_all = TRUE) %>%
  arrange(Year, Month_Index) %>%
  mutate(Label = case_when(
    Month == "Overall_Avg" ~ paste("Overall Avg"),
    Month == "Gap" ~ "",
    Month == "Jan" ~ paste("Jan", Year),
    Month == "Jul" ~ paste("Jul", Year),
    TRUE ~ month.abb[Month_Index]
  )) %>%
  pull(Label)
```


# Improved Visualization

```{r}
#| label: fig-ggplot
#| fig-cap: "Revised visualization of inflation increase in Singapore by essential items and year/month."
#| fig-width: 6.0
#| fig-height: 5.8
#| out-width: 100%

# Generate heatmap with customised color and spacing
# Generate the heatmap including the average row and vertical lines for events
heatmap_with_average <- ggplot(combined_data, aes(x = Year_Month_Index, y = `Data Series`, fill = Percent_Change)) +
  geom_tile(color = "white", size = 0.5) +  # Add spacing between tiles
   geom_vline(aes(xintercept = "2020-04", color = "Circuit Breaker"), linetype = "solid", size = 0.8, show.legend = TRUE) +  # Circuit breaker lockdown
  geom_vline(aes(xintercept = "2022-02", color = "Russia-Ukraine War"), linetype = "solid", size = 0.8, show.legend = TRUE) +  # Russia-Ukraine War
  geom_vline(aes(xintercept = "2023-02", color = "Fully Release"), linetype = "solid", size = 0.8, show.legend = TRUE) +  # Fully release
  scale_x_discrete(breaks = x_breaks, labels = x_labels) +
  color_scale +
  scale_color_manual(
    name = "Events",
    values = c("Circuit Breaker" = "red", "Fully Release" = "#006400", "Russia-Ukraine War" = "#CC5500"),
    guide = guide_legend(
      title.position = "top",
      override.aes = list(
        linetype = "solid",
        size = 1,
        color = c("red", "#006400", "#CC5500"),
        keyheight = unit(1, "lines"),
        keywidth = unit(1, "lines")
      )
    )
  ) +
  labs(title = "Percentage Change In Consumer Price Index (CPI) From 2019 to 2023",
       x = NULL, y = NULL, fill = "Percentage Change") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  theme(plot.title = element_text(size = 12), 
        axis.text.x = element_text(size = 10), 
        axis.text.y = element_text(size = 10, margin = margin(0, 0, 0, 20)), 
        legend.title = element_text(size = 10),
        legend.text = element_text(size = 10)) +
  theme(plot.margin = unit(c(0, 0, 0, 0), "cm")) +
  theme(legend.position = "bottom",
        legend.box = "horizontal",
        legend.box.just = "top",
        legend.title.align = 0.5,
        legend.text.align = 0.5,
        legend.key.size = unit(1, "cm"),
        legend.key.width = unit(1, "cm")) +
  guides(
    fill = guide_colorbar(title.position = "top", barwidth = 10, barheight = 0.5),
    color = guide_legend(
      title.position = "top",
      label.position = "bottom",
      override.aes = list(
        linetype = "solid",
        size = 1,
        color = c("red", "#006400", "#CC5500"),
        keyheight = unit(2, "lines"),
        keywidth = unit(1, "lines")
      )
    )
  )

# Display the heatmap with the average row and event lines
print(heatmap_with_average)
```


# Further Suggestions for Interactivity




# Conclusion

.
