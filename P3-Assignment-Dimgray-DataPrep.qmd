---
title: "data_prep"
author: "wujie"
format: html
---

```{r}
# Load necessary libraries
library(tidyverse)
library(lubridate)
library(ggplot2)
library(RColorBrewer)
```


# load dataset
```{r}
# Load the dataset
dataset <- read_csv("M212911.csv", skip = 10)
dataset <- dataset[1:152,]
```

# Preprocess data
```{r}
# Convert relevant columns to numeric
dataset <- dataset %>%
  mutate(across(matches("^2019|^2020|^2021|^2022|^2023"), ~ as.numeric(as.character(.))))

month_data <- dataset %>%
  filter(`Data Series` %in% c("Food", "Food Excl Food Serving Services", "Clothing & Footwear", "Housing & Utilities", "Household Durables & Services", "Health Care", "Transport", "Communication", "Recreation & Culture", "Education", "Miscellaneous Goods & Services", "All Items")) %>%
  select(`Data Series`, matches("^2019|^2020|^2021|^2022|^2023"))

```

# define color and scale

```{r}
# Pivot longer for heatmap generation
long_data <- month_data %>%
  pivot_longer(cols = matches("^2019|^2020|^2021|^2022|^2023"), 
               names_to = "Year_Month", values_to = "Percent_Change") %>%
  separate(Year_Month, into = c("Year", "Month"), sep = " ") %>%
  mutate(Year = as.integer(Year), 
         Month = match(Month, month.abb),  # Convert month names to numeric
         Date = as.Date(paste(Year, Month, "01", sep = "-"), format = "%Y-%m-%d"))



# Adjust the data series names for better readability
long_data <- long_data %>%
  mutate(`Data Series` = case_when(
    `Data Series` == "Miscellaneous Goods & Services" ~ "Miscellaneous\nGoods & Services",
    `Data Series` == "Household Durables & Services" ~ "Household Durables\n& Services",
    `Data Series` == "Food Excl Food Serving Services" ~ "Food Excl Food\nServing Services",
    TRUE ~ as.character(`Data Series`)
  ))
```

```{r}
print(long_data)

```



```{r}



# Calculate yearly averages and assign them to month 13
yearly_averages <- long_data %>%
  group_by(Year, `Data Series`) %>%
  summarize(Percent_Change = mean(Percent_Change, na.rm = TRUE), .groups = 'drop') %>%
  mutate(Month = 13, Date = as.Date(paste(Year + +1, "01", "01", sep = "-")))  # Use a future date for plotting



# Combine the original data with the yearly averages
combined_data <- bind_rows(long_data, yearly_averages)




# Define custom color scale using RColorBrewer, including color for NA values
color_scale <- scale_fill_gradientn(
  colors = rev(brewer.pal(9, "RdYlBu")),  # Use the RdYlBu palette with 9 colors in reverse order
  values = scales::rescale(c(min(combined_data$Percent_Change, na.rm = TRUE), -3, 0, 3, 6, 9, 12, max(combined_data$Percent_Change, na.rm = TRUE))),  # Define breakpoints dynamically
  limits = c(min(combined_data$Percent_Change, na.rm = TRUE), max(combined_data$Percent_Change, na.rm = TRUE)),  # Dynamic limits
  breaks = seq(floor(min(combined_data$Percent_Change, na.rm = TRUE)), ceiling(max(combined_data$Percent_Change, na.rm = TRUE)), by = 3),  # Adjust breaks dynamically
  labels = as.character(seq(floor(min(combined_data$Percent_Change, na.rm = TRUE)), ceiling(max(combined_data$Percent_Change, na.rm = TRUE)), by = 3)),  # Adjust labels dynamically
  na.value = "white"  # Set color for NA values
  )
```

```{r}

print(combined_data)

```



# Generate heatmap
## add legend for the lines
```{r}
ggplot(long_data, aes(x = Date, y = `Data Series`, fill = Percent_Change)) +
  geom_tile(color = "white", size = 0.5) +  # Add spacing between tiles
  geom_vline(aes(xintercept = as.numeric(as.Date("2020-04-01")), color = "Circuit Breaker Lockdown"), linetype = "solid", size = 0.8, show.legend = TRUE) +  # Circuit breaker lockdown
  geom_vline(aes(xintercept = as.numeric(as.Date("2023-02-13")), color = "Fully Release"), linetype = "solid", size = 0.8, show.legend = TRUE) +  # Fully release
  color_scale +
  scale_x_date(
    breaks = seq.Date(from = min(long_data$Date, na.rm = TRUE), to = max(long_data$Date, na.rm = TRUE), by = "6 months"),
    date_labels = "%b %Y"
  ) +
  scale_color_manual(
    name = "Events",
    values = c("Circuit Breaker Lockdown" = "red", "Fully Release" = "#006400"),
    guide = guide_legend(
      title.position = "top",
      override.aes = list(
        linetype = "solid",
        size = 1,
        color = c("red", "#006400"),
        keyheight = unit(1, "lines"),
        keywidth = unit(1, "lines")
      )
    )
  ) +
  labs(title = "Percentage Change In Consumer Price Index (CPI) From 2019 to 2023",
       x = NULL, y = NULL, fill = "Percentage Change") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  theme(plot.title = element_text(size = 12), 
        axis.text.x = element_text(size = 10), 
        axis.text.y = element_text(size = 10, margin = margin(0, 0, 0, 20)), 
        legend.title = element_text(size = 10),
        legend.text = element_text(size = 10)) +
  theme(plot.margin = unit(c(0, 0, 0, 0), "cm")) +
  theme(legend.position = "bottom",
        legend.box = "horizontal",
        legend.box.just = "top",
        legend.title.align = 0.5,
        legend.text.align = 0.5,
        legend.key.size = unit(1, "cm"),
        legend.key.width = unit(1, "cm")) +
  guides(
    fill = guide_colorbar(title.position = "top", barwidth = 10, barheight = 0.5),
    color = guide_legend(
      title.position = "top",
      label.position = "bottom",
      override.aes = list(
        linetype = "solid",
        size = 1,
        color = c("red", "#006400"),
        keyheight = unit(2, "lines"),
        keywidth = unit(1, "lines")
      )
    )
  )


```

# heat map with yearly average
```{r}

# Pivot longer for heatmap generation
long_data <- month_data %>%
  pivot_longer(cols = matches("^2019|^2020|^2021|^2022|^2023"), 
               names_to = "Year_Month", values_to = "Percent_Change") %>%
  separate(Year_Month, into = c("Year", "Month"), sep = " ") %>%
  mutate(Year = as.integer(Year), 
         Month = factor(Month, levels = c(month.abb, "Average")),  # Add "Average" as the 13th month
         Month_Index = as.numeric(factor(Month, levels = c(month.abb, "Average"))),
         Year_Month_Index = paste(Year, sprintf("%02d", Month_Index), sep = "-"))


# Calculate yearly averages and assign them to month 13
yearly_averages <- long_data %>%
  group_by(Year, `Data Series`) %>%
  summarize(Percent_Change = mean(Percent_Change, na.rm = TRUE), .groups = 'drop') %>%
  mutate(Month = "Average", Month_Index = 14, Year_Month_Index = paste(Year, "14", sep = "-"))  # Use month index 13 for "Average"

# Add a small gap between "Average" and the following "January"
gap_data <- yearly_averages %>%
  mutate(Month = "Gap", Month_Index = 15, Year_Month_Index = paste(Year, "15", sep = "-"), Percent_Change = NA)

# Add a small gap between "Average" and the following "January"
gap_data_before_average <- yearly_averages %>%
  mutate(Month = "Gap", Month_Index = 13, Year_Month_Index = paste(Year, "13", sep = "-"), Percent_Change = NA)


# Combine the original data with the yearly averages and the gap
combined_data <- bind_rows(long_data, yearly_averages, gap_data,gap_data_before_average) %>%
  arrange(Year, Month_Index)

# Adjust the data series names for better readability
combined_data <- combined_data %>%
  mutate(`Data Series` = case_when(
    `Data Series` == "Miscellaneous Goods & Services" ~ "Miscellaneous\nGoods & Services",
    `Data Series` == "Household Durables & Services" ~ "Household Durables\n& Services",
    `Data Series` == "Food Excl Food Serving Services" ~ "Food Excl Food\nServing Services",
    TRUE ~ as.character(`Data Series`)
  ))

print(combined_data)

# Generate the x-axis breaks and labels to include January, July, and "Average" for each year
x_breaks <- combined_data %>%
  filter(Month %in% c("Jan", "Jul", "Average", "Gap")) %>%
  mutate(Year_Month_Index = paste(Year, sprintf("%02d", Month_Index), sep = "-")) %>%
  distinct(Year_Month_Index, .keep_all = TRUE) %>%
  arrange(Year, Month_Index) %>%
  pull(Year_Month_Index)

x_labels <- combined_data %>%
  filter(Month %in% c("Jan", "Jul", "Average", "Gap")) %>%
  mutate(Year_Month_Index = paste(Year, sprintf("%02d", Month_Index), sep = "-")) %>%
  distinct(Year_Month_Index, .keep_all = TRUE) %>%
  arrange(Year, Month_Index) %>%
  mutate(Label = case_when(
    Month == "Average" ~ paste("Avg", Year),
    Month == "Gap" ~ "",
    TRUE ~ month.abb[Month_Index]
  )) %>%
  pull(Label)
```


```{r}
# Generate the heatmap including the average row and vertical lines for events
heatmap_with_average <- ggplot(combined_data, aes(x = Year_Month_Index, y = `Data Series`, fill = Percent_Change)) +
  geom_tile(color = "white", size = 0.5) +  # Add spacing between tiles
  scale_x_discrete(breaks = x_breaks, labels = x_labels) +
  color_scale +
  scale_color_manual(
    name = "Events",
    values = c("Circuit Breaker Lockdown" = "red", "Fully Release" = "#006400"),
    guide = guide_legend(
      title.position = "top",
      override.aes = list(
        linetype = "solid",
        size = 1,
        color = c("red", "#006400"),
        keyheight = unit(1, "lines"),
        keywidth = unit(1, "lines")
      )
    )
  ) +
  labs(title = "Percentage Change In Consumer Price Index (CPI) From 2019 to 2023",
       x = NULL, y = NULL, fill = "Percentage Change") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  theme(plot.title = element_text(size = 12), 
        axis.text.x = element_text(size = 10), 
        axis.text.y = element_text(size = 10, margin = margin(0, 0, 0, 20)), 
        legend.title = element_text(size = 10),
        legend.text = element_text(size = 10)) +
  theme(plot.margin = unit(c(0, 0, 0, 0), "cm")) +
  theme(legend.position = "bottom",
        legend.box = "horizontal",
        legend.box.just = "top",
        legend.title.align = 0.5,
        legend.text.align = 0.5,
        legend.key.size = unit(1, "cm"),
        legend.key.width = unit(1, "cm")) +
  guides(
    fill = guide_colorbar(title.position = "top", barwidth = 10, barheight = 0.5),
    color = guide_legend(
      title.position = "top",
      label.position = "bottom",
      override.aes = list(
        linetype = "solid",
        size = 1,
        color = c("red", "#006400"),
        keyheight = unit(2, "lines"),
        keywidth = unit(1, "lines")
      )
    )
  )

# Display the heatmap with the average row and event lines
print(heatmap_with_average)

```
```{r}

# Pivot longer for heatmap generation
long_data <- month_data %>%
  pivot_longer(cols = matches("^2019|^2020|^2021|^2022|^2023"), 
               names_to = "Year_Month", values_to = "Percent_Change") %>%
  separate(Year_Month, into = c("Year", "Month"), sep = " ") %>%
  mutate(Year = as.integer(Year), 
         Month = factor(Month, levels = c(month.abb, "Overall_Avg")),  # Add "Overall_Avg" as the 14th month
         Month_Index = as.numeric(factor(Month, levels = c(month.abb, "Overall_Avg"))),
         Year_Month_Index = paste(Year, sprintf("%02d", Month_Index), sep = "-"))


# Calculate the overall average for each data series from 2019 to 2023
overall_averages <- long_data %>%
  filter(Year >= 2019 & Year <= 2023) %>%
  group_by(`Data Series`) %>%
  summarize(Percent_Change = mean(Percent_Change, na.rm = TRUE), .groups = 'drop') %>%
  mutate(Year = 2023, Month = "Overall_Avg", Month_Index = 14, Year_Month_Index = "2023-14")  # Use month index 14 for "Overall_Avg"


# Add a small gap before and after "Overall_Avg"
gap_data_before_avg <- overall_averages %>%
  mutate(Month = "Gap", Month_Index = 13, Year_Month_Index = "2023-13", Percent_Change = NA)

gap_data_after_avg <- overall_averages %>%
  mutate(Month = "Gap", Month_Index = 15, Year_Month_Index = "2023-15", Percent_Change = NA)

# Combine the original data with the overall averages and the gaps
combined_data <- bind_rows(long_data, overall_averages, gap_data_before_avg, gap_data_after_avg) %>%
  arrange(Year, Month_Index)
```

```{r}
print(combined_data)
```

# heat map with overall average
```{r}
# Adjust the data series names for better readability
combined_data <- combined_data %>%
  mutate(`Data Series` = case_when(
    `Data Series` == "Miscellaneous Goods & Services" ~ "Miscellaneous\nGoods & Services",
    `Data Series` == "Household Durables & Services" ~ "Household Durables\n& Services",
    `Data Series` == "Food Excl Food Serving Services" ~ "Food Excl Food\nServing Services",
    TRUE ~ as.character(`Data Series`)
  ))

# Define custom color scale using RColorBrewer, including color for NA values
color_scale <- scale_fill_gradientn(
  colors = rev(brewer.pal(9, "RdYlBu")),  # Use the RdYlBu palette with 9 colors in reverse order
  values = scales::rescale(c(min(combined_data$Percent_Change, na.rm = TRUE), -3, 0, 3, 6, 9, 12, max(combined_data$Percent_Change, na.rm = TRUE))),  # Define breakpoints dynamically
  limits = c(min(combined_data$Percent_Change, na.rm = TRUE), max(combined_data$Percent_Change, na.rm = TRUE)),  # Dynamic limits
  breaks = seq(floor(min(combined_data$Percent_Change, na.rm = TRUE)), ceiling(max(combined_data$Percent_Change, na.rm = TRUE)), by = 3),  # Adjust breaks dynamically
  labels = as.character(seq(floor(min(combined_data$Percent_Change, na.rm = TRUE)), ceiling(max(combined_data$Percent_Change, na.rm = TRUE)), by = 3)),  # Adjust labels dynamically
  na.value = "white"  # Set color for NA values
)

# Generate the x-axis breaks and labels to include January, July, and "Overall_Avg" for each year
x_breaks <- combined_data %>%
  filter(Month %in% c("Jan", "Jul", "Overall_Avg", "Gap")) %>%
  mutate(Year_Month_Index = paste(Year, sprintf("%02d", Month_Index), sep = "-")) %>%
  distinct(Year_Month_Index, .keep_all = TRUE) %>%
  arrange(Year, Month_Index) %>%
  pull(Year_Month_Index)

x_labels <- combined_data %>%
  filter(Month %in% c("Jan", "Jul", "Overall_Avg", "Gap")) %>%
  mutate(Year_Month_Index = paste(Year, sprintf("%02d", Month_Index), sep = "-")) %>%
  distinct(Year_Month_Index, .keep_all = TRUE) %>%
  arrange(Year, Month_Index) %>%
  mutate(Label = case_when(
    Month == "Overall_Avg" ~ paste("Overall Avg"),
    Month == "Gap" ~ "",
    Month == "Jan" ~ paste("Jan", Year),
    Month == "Jul" ~ paste("Jul", Year),
    TRUE ~ month.abb[Month_Index]
  )) %>%
  pull(Label)

# Debug print statements
print(x_breaks)
print(x_labels)
```



```{r}
# Generate the heatmap including the average row and vertical lines for events
heatmap_with_average <- ggplot(combined_data, aes(x = Year_Month_Index, y = `Data Series`, fill = Percent_Change)) +
  geom_tile(color = "white", size = 0.5) +  # Add spacing between tiles
   geom_vline(aes(xintercept = "2020-04", color = "Circuit Breaker"), linetype = "solid", size = 0.8, show.legend = TRUE) +  # Circuit breaker lockdown
  geom_vline(aes(xintercept = "2022-02", color = "Russia-Ukraine War"), linetype = "solid", size = 0.8, show.legend = TRUE) +  # Russia-Ukraine War
  geom_vline(aes(xintercept = "2023-02", color = "Fully Release"), linetype = "solid", size = 0.8, show.legend = TRUE) +  # Fully release
  scale_x_discrete(breaks = x_breaks, labels = x_labels) +
  color_scale +
  scale_color_manual(
    name = "Events",
    values = c("Circuit Breaker" = "red", "Fully Release" = "#006400", "Russia-Ukraine War" = "#CC5500"),
    guide = guide_legend(
      title.position = "top",
      override.aes = list(
        linetype = "solid",
        size = 1,
        color = c("red", "#006400", "#CC5500"),
        keyheight = unit(1, "lines"),
        keywidth = unit(1, "lines")
      )
    )
  ) +
  labs(title = "Percentage Change In Consumer Price Index (CPI) From 2019 to 2023",
       x = NULL, y = NULL, fill = "Percentage Change") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  theme(plot.title = element_text(size = 12), 
        axis.text.x = element_text(size = 10), 
        axis.text.y = element_text(size = 10, margin = margin(0, 0, 0, 20)), 
        legend.title = element_text(size = 10),
        legend.text = element_text(size = 10)) +
  theme(plot.margin = unit(c(0, 0, 0, 0), "cm")) +
  theme(legend.position = "bottom",
        legend.box = "horizontal",
        legend.box.just = "top",
        legend.title.align = 0.5,
        legend.text.align = 0.5,
        legend.key.size = unit(1, "cm"),
        legend.key.width = unit(1, "cm")) +
  guides(
    fill = guide_colorbar(title.position = "top", barwidth = 10, barheight = 0.5),
    color = guide_legend(
      title.position = "top",
      label.position = "bottom",
      override.aes = list(
        linetype = "solid",
        size = 1,
        color = c("red", "#006400", "#CC5500"),
        keyheight = unit(2, "lines"),
        keywidth = unit(1, "lines")
      )
    )
  )

# Display the heatmap with the average row and event lines
print(heatmap_with_average)
```
